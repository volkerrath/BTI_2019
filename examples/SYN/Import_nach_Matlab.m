%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Besitzer\Desktop\Workshop\Matlab\BTI_2019\examples\TMP\Gt_Tp_1.95_Annahme_Parameter.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2019/07/23 13:56:55

%% Initialize variables.
filename = 'C:\Users\Besitzer\Desktop\Workshop\Matlab\BTI_2019\examples\TMP\Gt_Tp_1.95_Annahme_Parameter.csv';
delimiter = ',';
startRow = 3;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12]);
rawStringColumns = string(raw(:, 13));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
GtTp1 = table;
GtTp1.Depth = cell2mat(rawNumericColumns(:, 1));
GtTp1.Temperature_ = cell2mat(rawNumericColumns(:, 2));
GtTp1.TC_m = cell2mat(rawNumericColumns(:, 3));
GtTp1.RHOC_m = cell2mat(rawNumericColumns(:, 4));
GtTp1.PHI = cell2mat(rawNumericColumns(:, 5));
GtTp1.RHOB = cell2mat(rawNumericColumns(:, 6));
GtTp1.TC_m_min = cell2mat(rawNumericColumns(:, 7));
GtTp1.TC_m_max = cell2mat(rawNumericColumns(:, 8));
GtTp1.RHOC_m_miD = cell2mat(rawNumericColumns(:, 9));
GtTp1.RHOC_m_max = cell2mat(rawNumericColumns(:, 10));
GtTp1.TClog = cell2mat(rawNumericColumns(:, 11));
GtTp1.RHOClog = cell2mat(rawNumericColumns(:, 12));
GtTp1.VarName13 = rawStringColumns(:, 1);

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns R;