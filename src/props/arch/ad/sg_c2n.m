%
%                             DISCLAIMER
%
%
% This file was generated by:
% ADiMat version 0.5.2 (*** DEBUG ***, beta, lcse, gcse(ß), fwdmd, 2fwdmd, opt_ls, constfold, narg, vararg(ß), Jun 27 2008) arch: i686-pc-linux-gnu
% compiled Jun 27 2008 with gcc 4.1.2 20070925 (Red Hat 4.1.2-33).
% Copyright 2001- 2007 Andre Vehreschild, Institute for
% Scientific Computing, Aachen University, D-52056 Aachen, Germany.
% http://www.sc.rwth-aachen.de/vehreschild/adimat/
% This file was augmented on Thu Oct 23 16:15:55 2008
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOLOOPSAVING -- Do not insert ls_* functions to encapsulate the loops over
%		 directional derivatives.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% VISITFWDMD  -- Use the visitor to generate the differentiated code.
% GRADFUNCPREFIX='sg_'

function [g_vn, vn]= sg_c2n(g_vc, vc, d)
   % VN=C2N(VC,D) interpolates cell center values  to nodes.
   %
   % function [vc] = c2n(vn,z) interpolates cellwise
   % defined parameter to nodes. takes cell values vc and
   % cell sizes d, gives nodal valuse vn. size of vn is
   % length(vc)+1=length(d)+1.
   %
   % V. R.,  Aug.15, 2001 
   
   nc= length(vc); nn= nc+ 1; 
   tmp_c2n_00000= 2: nc;
   tmp_c2n_00003= 1: nc- 1;
   tmp_c2n_00006= d(tmp_c2n_00000)+ d(tmp_c2n_00003);
   g_vn(2: nc)= ((d(tmp_c2n_00000).* g_vc(tmp_c2n_00000)+ d(tmp_c2n_00003).* g_vc(tmp_c2n_00003)).* tmp_c2n_00006)./ tmp_c2n_00006.^ 2;
   vn(2: nc)= (d(tmp_c2n_00000).* vc(tmp_c2n_00000)+ d(tmp_c2n_00003).* vc(tmp_c2n_00003))./ tmp_c2n_00006; 
   
   clear tmp_c2n_00000 tmp_c2n_00006 tmp_c2n_00003 ;
   g_tmp_vc_00002= g_vc(1);
   tmp_vc_00002= vc(1);
   tmp_c2n_00009= d(1)+ d(2);
   g_vn(1)= g_tmp_vc_00002+ (((tmp_c2n_00009)' \ d(1)* (g_tmp_vc_00002- g_vc(2))' )' );
   vn(1)= tmp_vc_00002+ (d(1)* (tmp_vc_00002- vc(2)))/ tmp_c2n_00009; 
   clear tmp_vc_00002 g_tmp_vc_00002 tmp_c2n_00009 ;
   g_tmp_vc_00004= g_vc(nc);
   tmp_vc_00004= vc(nc);
   tmp_c2n_00011= nc- 1;
   tmp_c2n_00014= d(nc)+ d(tmp_c2n_00011);
   g_vn(nn)= g_tmp_vc_00004+ (((tmp_c2n_00014)' \ d(nc)* (g_tmp_vc_00004- g_vc(tmp_c2n_00011))' )' );
   vn(nn)= tmp_vc_00004+ (d(nc)* (tmp_vc_00004- vc(tmp_c2n_00011)))/ tmp_c2n_00014; 
   clear tmp_vc_00004 tmp_c2n_00011 g_tmp_vc_00004 tmp_c2n_00014 ;
