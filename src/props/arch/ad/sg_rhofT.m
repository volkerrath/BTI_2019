%
%                             DISCLAIMER
%
%
% This file was generated by:
% ADiMat version 0.5.2 (*** DEBUG ***, beta, lcse, gcse(ß), fwdmd, 2fwdmd, opt_ls, constfold, narg, vararg(ß), Jun 27 2008) arch: i686-pc-linux-gnu
% compiled Jun 27 2008 with gcc 4.1.2 20070925 (Red Hat 4.1.2-33).
% Copyright 2001- 2007 Andre Vehreschild, Institute for
% Scientific Computing, Aachen University, D-52056 Aachen, Germany.
% http://www.sc.rwth-aachen.de/vehreschild/adimat/
% This file was augmented on Thu Oct 23 16:15:55 2008
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOLOOPSAVING -- Do not insert ls_* functions to encapsulate the loops over
%		 directional derivatives.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% VISITFWDMD  -- Use the visitor to generate the differentiated code.
% GRADFUNCPREFIX='sg_'

function [g_rho, rho]= sg_rhofT(g_T, T, g_P, P)
   % [rho]=rhofT(T,P) calculate the density i(in kg/m^3) of pure water, 
   % given temperature (T, in C), and optionally pressure (P,in Pa).
   %
   % Derived from the Formulation given in:
   % Zylkovskij et al: Models and Methods Summary for the FEHMN Application,
   %       ECD 22, LA-UR-94-3787, Los Alamos NL, 1994.
   % 
   % Range of validity: Pressures   0.01 - 110 MPa, 
   %                    Temperature   15 - 350 °C
   %
   % VR RWTH Aachen University,   April 25, 2004
   
   
   narginmapper_00001= [0, 1, 0, 2];
   if narginmapper_00001(nargin)< 2, P= 0.1; g_P= zeros(size(P));
   end
   [n1, n2]= size(T); if n1== 1, g_tmp_rhofT_00028= g_T' ;
      tmp_rhofT_00028= T' ; % Update detected: T= some_expression(T,...)
      g_T= g_tmp_rhofT_00028;
      T= tmp_rhofT_00028;
   end
   [n1, n2]= size(P); if n1== 1, g_tmp_rhofT_00029= g_P' ;
      tmp_rhofT_00029= P' ; % Update detected: P= some_expression(P,...)
      g_P= g_tmp_rhofT_00029;
      P= tmp_rhofT_00029;
   end
   
   ac= [0.10000000e+01, 0.17472599e-01, -0.20443098e-04, -0.17442012e-06, 0.49564109e-02, -0.40757664e-04, 0.50676664e-07, 0.50330978e-04, 0.33914814e-06, -0.18383009e-06, 0.10009476e-02, 0.16812589e-04, -0.24582622e-07, -0.17014984e-09, 0.48841156e-05, -0.32967985e-07, 0.28619380e-10, 0.53249055e-07, 0.30456698e-09, -0.12221899e-09]; 
   
   % Pressure in MPa 
   g_tmp_rhofT_00030= (1.e6' \ g_P' )' ;
   tmp_rhofT_00030= P/ 1.e6; % Update detected: P= some_expression(P,...)
   g_P= g_tmp_rhofT_00030;
   P= tmp_rhofT_00030;
   g_P2= g_P.* P+ P.* g_P;
   P2= P.* P; g_P3= g_P2.* P+ P2.* g_P;
   P3= P2.* P; P4= P3.* P; 
   g_T2= g_T.* T+ T.* g_T;
   T2= T.* T; 
   g_T3= g_T2.* T+ T2.* g_T;
   T3= T2.* T; g_TP= g_P.* T+ P.* g_T;
   TP= P.* T; g_T2P= g_T2.* P+ T2.* g_P;
   T2P= T2.* P; g_TP2= g_T.* P2+ T.* g_P2;
   TP2= T.* P2; 
   %    liquid density
   %     
   a= ac(1)+ ac(2)* P+ ac(3)* P2+ ac(4)* P3+ ac(5)* T+ ac(6)* T2+ ac(7)* T3+ ac(8)* TP+ ac(10)* T2P+ ac(9)* TP2; 
   b= ac(11)+ ac(12)* P+ ac(13)* P2+ ac(14)* P3+ ac(15)* T+ ac(16)* T2+ ac(17)* T3+ ac(18)* TP+ ac(20)* T2P+ ac(19)* TP2; 
   g_rho= ((ac(2)* g_P+ ac(3)* g_P2+ ac(4)* g_P3+ ac(5)* g_T+ ac(6)* g_T2+ ac(7)* g_T3+ ac(8)* g_TP+ ac(10)* g_T2P+ ac(9)* g_TP2).* b- a.* (ac(12)* g_P+ ac(13)* g_P2+ ac(14)* g_P3+ ac(15)* g_T+ ac(16)* g_T2+ ac(17)* g_T3+ ac(18)* g_TP+ ac(20)* g_T2P+ ac(19)* g_TP2))./ b.^ 2;
   rho= a./ b; 
   
   % after Speedy (1987) for T < 0 to -46 C
   bc= [0.999195706402050* 901.5328593, -0.0011761652, 0.0038442382, -0.0157270761, 0.0744064614, -0.1406432653]; 
   
   ic= T< 0.; 
   T(T< -45.)= -45; 
   g_T(T< -45.)= zeros(size(T(T< -45.)));
   g_r= (227.15' \ ((g_T(ic)))' )' ;
   r= (T(ic)+ 46)/ 227.15; 
   g_r2= g_r.* r+ r.* g_r;
   r2= r.* r; g_r3= g_r2.* r+ r2.* g_r;
   r3= r2.* r; tmp_sqrt_00002= sqrt(r);
   tmp_rhofT_00027= -227.15* (bc(3)* r+ 0.5* bc(4)* r2+ 0.333333* bc(5)* r3+ 0.25* bc(6)* (r3.* r)+ 2* bc(2)* tmp_sqrt_00002);
   g_rho(ic)= bc(1)* ((-227.15* (bc(3)* g_r+ 0.5* bc(4)* g_r2+ 0.333333* bc(5)* g_r3+ 0.25* bc(6)* (g_r3.* r+ r3.* g_r)+ 2* bc(2)* (g_r./ (2.* tmp_sqrt_00002)))).* exp(tmp_rhofT_00027));
   rho(ic)= bc(1)* exp(tmp_rhofT_00027); 
   
   
   clear tmp_rhofT_00027 tmp_sqrt_00002 ;
