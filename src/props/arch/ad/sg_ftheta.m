%
%                             DISCLAIMER
%
%
% This file was generated by:
% ADiMat version 0.5.2 (*** DEBUG ***, beta, lcse, gcse(ß), fwdmd, 2fwdmd, opt_ls, constfold, narg, vararg(ß), Jun 27 2008) arch: i686-pc-linux-gnu
% compiled Jun 27 2008 with gcc 4.1.2 20070925 (Red Hat 4.1.2-33).
% Copyright 2001- 2007 Andre Vehreschild, Institute for
% Scientific Computing, Aachen University, D-52056 Aachen, Germany.
% http://www.sc.rwth-aachen.de/vehreschild/adimat/
% This file was augmented on Thu Oct 23 16:15:55 2008
%
% ADiMat was prepared as part of an employment at the Institute
% for Scientific Computing, RWTH Aachen University, Germany and is
% provided AS IS. NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL
% REPUBLIC OF GERMANY NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY,
% EXPRESS OR IMPLIED, OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY
% FOR THE ACCURACY, COMPLETENESS, OR USEFULNESS OF ANY INFORMATION OR
% PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE WOULD NOT INFRINGE
% PRIVATELY OWNED RIGHTS.
%
% Global flags were:
% FORWARDMODE -- Apply the forward mode to the files.
% NOOPEROPTIM -- Do not use optimized operators. I.e.:
%		 g_a*b*g_c -/-> mtimes3(g_a, b, g_c)
% NOGLOBALCSE -- Prevents the application of global common subexpression
%		 elimination after canonicalizing the code.
% NOLOOPSAVING -- Do not insert ls_* functions to encapsulate the loops over
%		 directional derivatives.
% FUNCMODE    -- Inputfile is a function (This flag can not be set explicitly).
% VISITFWDMD  -- Use the visitor to generate the differentiated code.
% GRADFUNCPREFIX='sg_'

function [g_Theta, Theta, g_dTheta, dTheta]= sg_ftheta(g_T, T, Tf, w)
   % [theta,dtheta]=ftheta(T,Tf,w) calculates the fluid/ice  
   % partition function used for the apparent heat capacity approach
   % to phase change.
   %
   % On Input: 
   % T            =     temperature
   % Tf           =     phase boundary temperature
   %                   (DEFAULT: 0)
   % w            =     scaling factor for "mushy" region 
   %                   (DEFAULT: 1)
   %
   % On Ouput: 
   % Theta            =    value of partition function
   %                       (0<Theta<1)
   % dTheta            =   derivative of partition function
   %                       with respect to temperature
   %
   nargoutmapper_00000= [0, 1, 0, 2];
   narginmapper_00004= [0, 1, 2, 3];
   if narginmapper_00004(nargin)< 4, rfl= .025; end
   if narginmapper_00004(nargin)< 3, w= 1.; end
   if narginmapper_00004(nargin)< 2, Tf= 0; end
   
   
   tmp_ftheta_00001= (T- Tf)./ w;
   tmp_ftheta_00003= -tmp_ftheta_00001.^ 2;
   g_Theta= (-2.* tmp_ftheta_00001.* (((g_T).* w)./ w.^ 2)).* exp(tmp_ftheta_00003);
   Theta= exp(tmp_ftheta_00003); 
   clear tmp_ftheta_00003 tmp_ftheta_00001 ;
   tmp_ftheta_00004= T> Tf;
   g_tmp_ftheta_00004= zeros(size(tmp_ftheta_00004));
   b= find(tmp_ftheta_00004); clear tmp_ftheta_00004 g_tmp_ftheta_00004 ;
   Theta(b)= 1.; 
   g_Theta(b)= zeros(size(Theta(b)));
   tmp_ftheta_00005= Theta< rfl;
   g_tmp_ftheta_00005= zeros(size(tmp_ftheta_00005));
   a= find(tmp_ftheta_00005); clear tmp_ftheta_00005 g_tmp_ftheta_00005 ;
   Theta(a)= rfl; 
   g_Theta(a)= zeros(size(Theta(a)));
   if nargoutmapper_00000(nargout)> 1, 
      c= -2/ (w* w); 
      tmp_ftheta_00008= c* (T- Tf);
      g_dTheta= c* (g_T).* Theta+ tmp_ftheta_00008.* g_Theta;
      dTheta= tmp_ftheta_00008.* Theta; 
      clear tmp_ftheta_00008 ;
      dTheta(b)= 0.; 
      g_dTheta(b)= zeros(size(dTheta(b)));
      dTheta(a)= 0.; 
      g_dTheta(a)= zeros(size(dTheta(a)));
   end
